package com.khopan.application.utils;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

import javax.swing.Icon;
import javax.swing.ImageIcon;

public class Logo {
	public static final Color BACKGROUND_AUTO_GENERATED = new BackgroundAutoGeneratedColor(0x000000);

	public String Text;
	public String FontFamily;
	public int FontStyle;
	public int FontSize;
	public Color Foreground;
	public Color Background;
	public Color Border;
	public int BorderWeight;
	public boolean RoundedCorners;
	public boolean AutoResizeFont;
	public boolean AutoBorderWeight;

	private BufferedImage Image;
	private Dimension BeforeSize = new Dimension();

	public Logo() {

	}

	public BufferedImage build(Dimension size) {
		if(size == null) {
			size = new Dimension(16, 16);
		}

		size.width = size.width <= 0 ? 1 : size.width;
		size.height = size.height <= 0 ? 1 : size.height;

		if(
				this.BeforeSize.width != size.width ||
				this.BeforeSize.height != size.height ||
				this.Image == null
				) {
			this.BeforeSize = size;
			BufferedImage Image = new BufferedImage(this.BeforeSize.width, this.BeforeSize.height, BufferedImage.TYPE_INT_ARGB);
			Graphics2D Graphics2D = (Graphics2D) Image.getGraphics();
			this.paintImage(Graphics2D, this.BeforeSize);
			this.Image = Image;
			Image.flush();
		}

		return this.Image;
	}

	private void paintImage(Graphics2D Graphics2D, Dimension size) {
		boolean ndb = ((this.Border == null) || ((this.BorderWeight <= 0) && !this.AutoBorderWeight));
		Color fg = this.color(this.Foreground);
		Color bg = (this.Background instanceof BackgroundAutoGeneratedColor) ? this.shadow(fg) : this.Background;
		int arcOut = this.RoundedCorners ? this.integer((size.width + size.height) / 4.26666666d) : 0;
		int arcIn = 0;
		int bw = ((this.BorderWeight <= 0) || this.AutoBorderWeight) ? this.integer((size.width + size.height) / 21.3333333d) : this.BorderWeight;

		Graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

		if(!ndb) {
			Graphics2D.setColor(this.color(this.Border));
			Graphics2D.fillRoundRect(0, 0, size.width, size.height, arcOut, arcOut);
			Graphics2D.setColor(bg);
			Graphics2D.fillRoundRect(0, 0, size.width, size.height, arcIn, arcIn);
		} else {
			Graphics2D.setColor(bg);
			Graphics2D.fillRoundRect(0, 0, size.width, size.height, arcOut, arcOut);
		}

		if(this.Text != null) {
			int cfs = this.integer((size.width + size.height) / (!ndb ? 3.5d : 3.0d));
			int fs = ((this.FontSize <= 0) || this.AutoResizeFont) ? cfs : this.FontSize;
			Font f = new Font((this.FontFamily == null || this.FontFamily.equals("")) ? "Calibri" : this.FontFamily, (this.FontStyle >= Font.PLAIN && this.FontStyle <= 3) ? this.FontStyle : Font.BOLD, fs);;
			FontMetrics mt = Graphics2D.getFontMetrics(f);
			int w = !ndb ? (bw + (size.width - bw * 2) / 10) : (size.width / 10);
			int tx = (size.width - mt.stringWidth(this.Text)) / 2;
			int ty = size.height / 2 + mt.getHeight() / 4;
			String ff = f.getFamily();
			int fst = f.getStyle();
			Font rf = new Font(ff, fst, f.getSize());

			while(tx < w) {
				rf = new Font(ff, fst, rf.getSize() - 1);
				mt = Graphics2D.getFontMetrics(rf);
				tx = (size.width - mt.stringWidth(this.Text)) / 2;
				ty = size.height / 2 + mt.getHeight() / 4;
			}

			Graphics2D.setColor(fg);
			Graphics2D.setFont(rf);
			Graphics2D.drawString(this.Text, tx, ty);
		}

		Graphics2D.dispose();
	}

	private Color shadow(Color Foreground) {
		float HSBColor[] = Color.RGBtoHSB(Foreground.getRed(), Foreground.getGreen(), Foreground.getBlue(), null);
		return Color.getHSBColor(HSBColor[0], HSBColor[1], 0.21f * HSBColor[2]);
	}

	public static BufferedImage createRoundedNoBorderIcon(String Text, Color Foreground, Color Background, Dimension size) {
		Logo Icon = new Logo();
		Icon.Text = Text;
		Icon.FontFamily = "Calibri";
		Icon.FontStyle = Font.BOLD;
		Icon.Foreground = Foreground;
		Icon.Background = Background;
		Icon.RoundedCorners = true;
		Icon.AutoResizeFont = true;

		return Icon.build(size);
	}

	public static Icon toIcon(Image Image) {
		ImageIcon Icon = new ImageIcon(Image);

		return new Icon() {
			@Override
			public void paintIcon(Component Component, Graphics Graphics, int x, int y) {
				Icon.paintIcon(Component, Graphics, x, y);
			}

			@Override
			public int getIconWidth() {
				return Icon.getIconWidth();
			}

			@Override
			public int getIconHeight() {
				return Icon.getIconHeight();
			}
		};
	}

	public static Image toImage(Icon Icon) {
		if(Icon instanceof ImageIcon) {
			return ((ImageIcon) Icon).getImage();
		} else {
			int width = Icon.getIconWidth();
			int height = Icon.getIconHeight();
			GraphicsEnvironment Environment = GraphicsEnvironment.getLocalGraphicsEnvironment();
			GraphicsDevice Device = Environment.getDefaultScreenDevice();
			GraphicsConfiguration Configuration = Device.getDefaultConfiguration();
			BufferedImage Image = Configuration.createCompatibleImage(width, height);
			Graphics2D Graphics2D = Image.createGraphics();
			Icon.paintIcon(null, Graphics2D, 0, 0);
			Graphics2D.dispose();

			return Image;
		}
	}

	private int integer(double Number) {
		return (int) Math.round(Number);
	}

	private Color color(Color Color) {
		return Color == null ? new Color(0x000000) : Color;
	}

	@SuppressWarnings("serial")
	private static class BackgroundAutoGeneratedColor extends Color {
		public BackgroundAutoGeneratedColor(int Color) {
			super(Color);
		}
	}
}
